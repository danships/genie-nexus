name: Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Update router package version
        run: |
          cd packages/router
          # Use jq to update the version in package.json directly
          jq --arg version "${{ steps.extract-version.outputs.version }}" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated router package version to ${{ steps.extract-version.outputs.version }}"

      # - name: Commit version update
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add packages/router/package.json
      #     git commit -m "Update router version to ${{ steps.extract-version.outputs.version }}"
      #     git push

  build-docker:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Log in to Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-ui:
    needs: [update-version, build-docker]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [sqlite, mysql]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Playwright install
        run: pnpm exec playwright install

      - name: Start MySQL container
        if: matrix.database == 'mysql'
        run: |
          docker run -d \
            --name mysql-test \
            -e MYSQL_ROOT_PASSWORD=testpassword \
            -e MYSQL_DATABASE=testdb \
            -p 3306:3306 \
            mariadb:11.7.2

          # Wait for MySQL to be ready
          docker exec mysql-test mysqladmin ping -h localhost -u root -ptestpassword --wait=30

      - name: Run UI tests with SQLite
        if: matrix.database == 'sqlite'
        run: pnpm test:ui
        env: 
          DB=sqlite
          AUTH_METHOD=none

      - name: Run UI tests with MySQL
        if: matrix.database == 'mysql'
        run: |
          pnpm test:ui
        env:
          DB: mysql://root:testpassword@localhost:3306/testdb
          AUTH_METHOD=none

      - name: Stop MySQL container
        if: matrix.database == 'mysql' && always()
        run: docker stop mysql-test && docker rm mysql-test

  push-docker:
    needs: [update-version, build-docker, test-ui]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }}
            # TODO ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [update-version, push-docker]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and run container to extract files
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }}

          # Create a temporary container
          CONTAINER_ID=$(docker create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }})

          # Copy the /app folder from the container
          docker cp $CONTAINER_ID:/app ./app-files

          # Stop and remove the container
          docker rm $CONTAINER_ID

          # Create a zip file of the app files
          cd app-files
          zip -r ../app-files.zip .
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.update-version.outputs.version }}
          name: Release ${{ needs.update-version.outputs.version }}
          body: |
            ## What's Changed

            This release includes:
            - Updated router package to version ${{ needs.update-version.outputs.version }}
            - Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }}`

            ## Installation

            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.update-version.outputs.version }}
            ```
          files: app-files.zip
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
