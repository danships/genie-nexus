---
description: 
globs: 
alwaysApply: false
---
# Grid/Overview Pages Standard

## Overview
This document outlines the standard patterns and best practices for implementing grid/overview pages in the Genie Nexus project.

## Structure

### Page Component
```typescript
'use client';

import { useApi, useCudApi } from '@lib/api/use-api';
import { disableSSR } from '@lib/components/atoms/disable-ssr';
import { Loader } from '@lib/components/atoms/loader';
import {
  Table,
  Badge,
  Group,
  Text,
  Select,
  Stack,
  Title,
  Button,
  Modal,
} from '@mantine/core';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
```

### Required Features
1. **Client Component**
   - Use 'use client' directive
   - Wrap component with `disableSSR` for client-side rendering

2. **State Management**
   - Use `useState` for local state
   - Use `useApi` for data fetching
   - Use `useCudApi` for mutations
   - Use `useRouter` for navigation

3. **Layout Structure**
   ```typescript
   <Stack>
     <Group justify="space-between" align="center">
       <Title order={1}>[Page Title]</Title>
       <Button onClick={() => router.push('/[path]/new')}>
         New [Entity]
       </Button>
     </Group>
     [Filters]
     [Table]
     [Modals]
   </Stack>
   ```

4. **Table Implementation**
   - Use Mantine's `Table` component
   - Include `striped` and `highlightOnHover` props
   - Structure with `Table.Thead` and `Table.Tbody`
   - Make rows clickable with `className="is-clickable"`

5. **Filtering**
   - Implement using Mantine's `Select` component
   - Place filters above the table
   - Use clearable filters where appropriate
   - Limit filter width with `maw` prop

6. **Actions**
   - Place action buttons in the last column
   - Use appropriate button variants (light, filled)
   - Implement confirmation modals for destructive actions

7. **Status Indicators**
   - Use Mantine's `Badge` component
   - Implement consistent color coding:
     - Active: green
     - Inactive: gray
     - Warning: orange
     - Info: blue
     - Special: violet

8. **Error Handling**
   - Implement loading states with `Loader` component
   - Use notifications for success/error feedback
   - Handle API errors gracefully

## Best Practices

1. **Type Safety**
   - Use TypeScript types for all data structures
   - Define proper interfaces for API responses
   - Use type guards where necessary

2. **Performance**
   - Implement proper data fetching with SWR
   - Use optimistic updates where appropriate
   - Implement proper loading states

3. **UX Considerations**
   - Provide clear feedback for user actions
   - Implement proper loading states
   - Use consistent spacing and layout
   - Make rows clickable for detail views
   - Use appropriate button sizes and variants

4. **Code Organization**
   - Keep components focused and single-responsibility
   - Extract complex logic into custom hooks
   - Use consistent naming conventions
   - Implement proper error boundaries

## Example Implementation
See `packages/management/src/app/app/deployments/_page.tsx` for a complete implementation following these standards.
